# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eMA93jImT_PLxViaPKaLENJ56NmwF3TN
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor

df = pd.read_csv('merged_dataset.csv')
df.head()

df.shape

df.info()

df.describe()

df.isnull().sum()

new_df = df.dropna()

new_df.isna().sum()

new_df.shape

new_df.info()

new_df['Year'] = new_df['Year'].astype('int')
new_df['Population'] = new_df['Population'].astype('int')
new_df['Violent Crimes'] = new_df['Violent Crimes'].astype('int')
new_df['Homicides'] = new_df['Homicides'].astype('int')
new_df['Rapes'] = new_df['Rapes'].astype('int')
new_df['Assaults'] = new_df['Assaults'].astype('int')
new_df['Robberies'] = new_df['Robberies'].astype('int')

new_df.info()



sns.boxplot(x=new_df['Year'])

sns.boxplot(x=new_df['Population'])

sns.boxplot(x=new_df['Violent Crimes'])

sns.boxplot(x=new_df['Homicides'])

sns.boxplot(x=new_df['Rapes'])

sns.boxplot(x=new_df['Assaults'])

sns.boxplot(x=new_df['Robberies'])

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR=Q3-Q1
df=df[~((df<(Q1-1.5*IQR))|(df>(Q3+1.5*IQR))).any(axis=1)]

df.shape

numerical_features = ['Year', 'index_nsa', 'Population', 'Violent Crimes', 'Homicides', 'Rapes', 'Assaults', 'Robberies']
categorical_features = ['City, State']

feature = categorical_features[0]
count = new_df[feature].value_counts()
percent = 100*new_df[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

new_df.hist(bins=50, figsize=(20,15))
plt.show()

cat_features = new_df.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
    sns.catplot(x=col, y="index_nsa", kind="bar", dodge=False, height = 4, aspect = 3,  data=new_df, palette="Set3")
    plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

new_df.drop(['City, State'], axis=1, inplace=True)
new_df.head()

sns.pairplot(new_df, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = new_df.corr().round(2)
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix", size=20)

x = new_df.drop(["index_nsa"],axis =1)
y = new_df["index_nsa"]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 150)

print(f'Total dataset: {len(x)}')
print(f'Total train dataset: {len(x_train)}')
print(f'Total test dataset: {len(x_test)}')

numerical_features = ['Year', 'Population', 'Violent Crimes', 'Homicides', 'Rapes', 'Assaults', 'Robberies']
scaler = StandardScaler()
scaler.fit(x_train[numerical_features])
x_train[numerical_features] = scaler.transform(x_train.loc[:, numerical_features])
x_train[numerical_features].head()

x_train[numerical_features].describe().round(4)

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['LinearRegression', 'KNN', 'RandomForest'])

lin_reg = LinearRegression()
lin_reg.fit(x_train, y_train)

models.loc['train_mse','LinearRegression'] = mean_squared_error(y_pred=lin_reg.predict(x_train), y_true=y_train)

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(x_train, y_train)

models.loc['train_mse','KNN'] = mean_squared_error(y_pred=knn.predict(x_train), y_true=y_train)

RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(x_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(x_train), y_true=y_train)

x_test.loc[:, numerical_features] = scaler.transform(x_test[numerical_features])

mse = pd.DataFrame(columns=['train', 'test'], index=['LinearRegression','KNN', 'RandomForest'])
model_dict = {'LinearRegression': lin_reg, 'KNN': knn, 'RandomForest':RF}
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(x_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(x_test))/1e3

mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

prediksi = x_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)

print("Accuracy score dari model Linear Regression = ", lin_reg.score(x_test, y_test))
print("Accuracy score dari model KNN               = ", knn.score(x_test, y_test))
print("Accuracy score dari model Random Forest     = ", RF.score(x_test, y_test))